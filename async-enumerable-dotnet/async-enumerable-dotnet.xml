<?xml version="1.0"?>
<doc>
    <assembly>
        <name>async-enumerable-dotnet</name>
    </assembly>
    <members>
        <member name="T:async_enumerable_dotnet.AsyncEnumerable">
            <summary>
            Factory and extension methods for working with <see cref="T:async_enumerable_dotnet.IAsyncEnumerable`1"/>s.
            </summary>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Zip``2(System.Func{``0[],``1},async_enumerable_dotnet.IAsyncEnumerable{``0}[])">
            <summary>
            Combine a row of the next elements from each async sequence via a zipper function.
            </summary>
            <typeparam name="T">The common element type of the sources.</typeparam>
            <typeparam name="R">The resulting element type.</typeparam>
            <param name="zipper">The function that receives the next items from the sources in
            an array and should return the value to be passed forward.</param>
            <param name="sources">The params array of async sequences.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.FromArray``1(``0[])">
            <summary>
            Wraps an array of items into an async sequence that emits its elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="values">The params array of values to emit.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Timeout``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.TimeSpan)">
            <summary>
            Signals a <see cref="T:System.TimeoutException"/> when more than the specified amount of
            time passes between items.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source sequence to relay items of.</param>
            <param name="timeout">The timeout between items.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Timer(System.TimeSpan)">
            <summary>
            Signals a 0L and completes after the specified time delay.
            </summary>
            <param name="delay">The time delay before emitting 0L and completing.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Timer(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Signals a 0L and completes after the specified time delay, allowing external
            cancellation via the given CancellationToken.
            </summary>
            <param name="delay">The time delay before emitting 0L and completing.</param>
            <param name="token">The token to cancel the timer.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
            <remarks>
            Note that the <see cref="T:System.Threading.CancellationToken"/> is shared across all instantiations of the
            async sequence and thus it is recommended this Timer is created in a deferred manner,
            such as <see cref="M:async_enumerable_dotnet.AsyncEnumerable.Defer``1(System.Func{async_enumerable_dotnet.IAsyncEnumerable{``0}})"/>.
            </remarks>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.DoOnDispose``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Action)">
            <summary>
            Calls the specified synchronous handler when the async sequence is disposed via
            <see cref="M:async_enumerable_dotnet.IAsyncDisposable.DisposeAsync"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source sequence to relay items of.</param>
            <param name="handler">The handler called when the sequence is disposed.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.DoOnDisposeAsync``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Calls the specified asynchronous handler when the async sequence is disposed via
            <see cref="M:async_enumerable_dotnet.IAsyncDisposable.DisposeAsync"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source sequence to relay items of.</param>
            <param name="handler">The async handler called when the sequence is disposed.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Error``1(System.Exception)">
            <summary>
            Signals the given Exception immediately.
            </summary>
            <typeparam name="T">The intended element type of the sequence.</typeparam>
            <param name="ex">The exception to signal immediately.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Using``2(System.Func{``1},System.Func{``1,async_enumerable_dotnet.IAsyncEnumerable{``0}},System.Action{``1})">
            <summary>
            Creates a resource and an actual async sequence with the help of this resource
            to be relayed and cleaned up afterwards.
            </summary>
            <typeparam name="T">The element type of the async sequence.</typeparam>
            <typeparam name="R">The resource type.</typeparam>
            <param name="resourceProvider">The function that returns the resource to be used.</param>
            <param name="sourceProvider">The function that produces the actual async sequence for
            the generated resource.</param>
            <param name="resourceCleanup">The action to cleanup the resource after the generated
            async sequence terminated.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.FromTask``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Create a task and emit its result/error as an async sequence.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="func">The function that returns a task that will create an item.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.FromTask``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Wrap an existing task and emit its result/error when it terminates as
            an async sequence.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="task">The task to wrap.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Create``1(System.Func{async_enumerable_dotnet.IAsyncEmitter{``0},System.Threading.Tasks.Task})">
            <summary>
            Creates an async sequence which emits items generated by the handler asynchronous function
            via the <see cref="T:async_enumerable_dotnet.IAsyncEmitter`1"/> provided. The sequence ends when
            the task completes or fails.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="handler">The function that receives the emitter to be used for emitting items
            and should return a task which when terminates, the resulting async sequence terminates.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Defer``1(System.Func{async_enumerable_dotnet.IAsyncEnumerable{``0}})">
            <summary>
            Defers the creation of the actual async sequence until the <see cref="M:async_enumerable_dotnet.IAsyncEnumerable`1.GetAsyncEnumerator"/> is called on the returned async sequence.
            </summary>
            <typeparam name="T">The element type of the async sequence.</typeparam>
            <param name="func">The function called when the async enumerator is requested.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Take``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Int64)">
            <summary>
            Relays at most the given number of items from the source async sequence.
            </summary>
            <typeparam name="T">The element type of the async sequence.</typeparam>
            <param name="source">The source async sequence to limit.</param>
            <param name="n">The number of items to let pass.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Range(System.Int32,System.Int32)">
            <summary>
            Generates a range of integer values as an async sequence.
            </summary>
            <param name="start">The starting value.</param>
            <param name="count">The number of items to generate.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.FlatMap``2(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``0,async_enumerable_dotnet.IAsyncEnumerable{``1}},System.Int32,System.Int32)">
            <summary>
            Maps the items of the source async sequence into async sequences and then
            merges the elements of those inner sequences into a one sequence.
            </summary>
            <typeparam name="T">The element type of the source async sequence.</typeparam>
            <typeparam name="R">The element type of the inner async sequences.</typeparam>
            <param name="source">The source that emits items to be mapped.</param>
            <param name="mapper">The function that takes an source item and should return
            an async sequence to be merged.</param>
            <param name="maxConcurrency">The maximum number of inner sequences to run at once.</param>
            <param name="prefetch">The number of items to prefetch from each inner async sequence.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Map``2(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Transforms each souce item into another item via a function.
            </summary>
            <typeparam name="T">The element type of the source.</typeparam>
            <typeparam name="R">The result type.</typeparam>
            <param name="source">The source async sequence to transform.</param>
            <param name="mapper">The function that takes a source item and should return the result item
            to be emitted.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Map``2(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Transforms each souce item into another item via an asynchronous function.
            </summary>
            <typeparam name="T">The element type of the source.</typeparam>
            <typeparam name="R">The result type.</typeparam>
            <param name="source">The source async sequence to transform.</param>
            <param name="mapper">The function that takes a source item and should return a task that produces
            the result item.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.FromObservable``1(System.IObservable{``0})">
            <summary>
            Wraps an <see cref="T:System.IObservable`1"/> and turns it into an async sequence that
            buffers all items until they are requested by the consumer of the async sequence.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source observable sequence to turn into an async sequence.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.ToAsyncEnumerable``1(System.IObservable{``0})">
            <summary>
            Wraps an <see cref="T:System.IObservable`1"/> and turns it into an async sequence that
            buffers all items until they are requested by the consumer of the async sequence.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source observable sequence to turn into an async sequence.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.ToObservable``1(async_enumerable_dotnet.IAsyncEnumerable{``0})">
            <summary>
            Converts an async sequence into an <see cref="T:System.IObservable`1"/>.
            </summary>
            <typeparam name="T">The element type of the sequence.</typeparam>
            <param name="source">The source async sequence to turn into an observable sequence.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Filter``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters out source items that don't pass the provided predicate.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence to filter.</param>
            <param name="predicate">The function receiving the source item and should
            return true if that item can be passed along.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Filter``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Filters out source items that don't pass the provided asynchronous predicate.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence to filter.</param>
            <param name="predicate">The function receiving the source item and should
            return a task that signals true if that item can be passed along.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.FromEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Wraps an <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence into an async sequence.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source sequence to turn into an async sequence.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Just``1(``0)">
            <summary>
            Creates an async sequence that emits the given pre-existing value.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="item">The item to emit.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Skip``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Int64)">
            <summary>
            Skips the first given number of items of the source async sequence.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source asnyc sequence.</param>
            <param name="n">The number of items to skip.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Empty``1">
            <summary>
            Returns a shared instance of an empty async sequence.
            </summary>
            <typeparam name="T">The target element type.</typeparam>
            <returns>The shared empty IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Never``1">
            <summary>
            Returns a shared instance of an async sequence that never produces any items or terminates.
            </summary>
            <typeparam name="T">The target element type.</typeparam>
            <returns>The shared non-signalling IAsyncEnumerable instance.</returns>
            <remarks>
            Note that the async sequence API doesn't really support a never emitting source because
            such source never completes its MoveNextAsync and thus DisposeAsync can't be called.
            </remarks>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.ForEach``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Consumes the source async sequence by calling the relevant callback action for the
            items and terminal signals.
            </summary>
            <typeparam name="T">The element type of the sequence.</typeparam>
            <param name="source">The source async sequence.</param>
            <param name="onNext">The action called for each item when they become available.</param>
            <param name="onError">The action called when the source async sequence fails.</param>
            <param name="onComplete">The action called when the source sequence completes normally.</param>
            <returns>The task that completes when the sequence terminates.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.FirstTask``1(async_enumerable_dotnet.IAsyncEnumerable{``0})">
            <summary>
            Returns a task that produces the first item of the source async sequence
            or an <see cref="T:System.IndexOutOfRangeException"/> if the source is empty.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence to get the first item of.</param>
            <returns>The task that completes with the first item of the sequence or fails.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.FirstTask``1(async_enumerable_dotnet.IAsyncEnumerable{``0},``0)">
            <summary>
            Returns a task that produces the first item of the source async sequence
            or the given default item if the source is empty.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence to get the first item of.</param>
            <param name="defaultItem">The item to return if the source is empty.</param>
            <returns>The task that completes with the first/default item of the sequence or fails.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.LastTask``1(async_enumerable_dotnet.IAsyncEnumerable{``0})">
            <summary>
            Returns a task that produces the last item of the source async sequence
            or an <see cref="T:System.IndexOutOfRangeException"/> if the source is empty.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence to get the last item of.</param>
            <returns>The task that completes with the last item of the sequence or fails.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.LastTask``1(async_enumerable_dotnet.IAsyncEnumerable{``0},``0)">
            <summary>
            Returns a task that produces the last item of the source async sequence
            or the given default item if the source is empty.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence to get the last item of.</param>
            <param name="defaultItem">The item to return if the source is empty.</param>
            <returns>The task that completes with the last/default item of the sequence or fails.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.SingleTask``1(async_enumerable_dotnet.IAsyncEnumerable{``0})">
            <summary>
            Returns a task that produces the only item of the source async sequence
            or an <see cref="T:System.IndexOutOfRangeException"/> if the source is empty or has more items.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence to get the only item of.</param>
            <returns>The task that completes with the only item of the sequence or fails.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.SingleTask``1(async_enumerable_dotnet.IAsyncEnumerable{``0},``0)">
            <summary>
            Returns a task that produces the only item of the source async sequence
            or the given default item if the source is empty.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence to get the only item of.</param>
            <param name="defaultItem">The item to return if the source is empty.</param>
            <returns>The task that completes with the only/default item of the sequence or fails.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Reduce``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Combines an accumulator and the next item through a function to produce
            a new accumulator of which the last accumulator value
            is the result item.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source to reduce into a single value.</param>
            <param name="reducer">The function that takes the previous accumulator value (or the first item), the current item and should produce the new accumulator value.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Reduce``2(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``1},System.Func{``1,``0,``1})">
            <summary>
            Combines an accumulator and the next item through a function to produce
            a new accumulator of which the last accumulator value
            is the result item.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="R">The accumulator and result type.</typeparam>
            <param name="source">The source to reduce into a single value.</param>
            <param name="initialSupplier">The function returning the initial accumulator value.</param>
            <param name="reducer">The function that takes the previous accumulator value (or the first item), the current item and should produce the new accumulator value.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Collect``2(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``1},System.Action{``1,``0})">
            <summary>
            Generates a collection and calls an action with
            the current item to be combined into it and then
            the collection is emitted as the final result.
            </summary>
            <typeparam name="T">The element type of the source async sequence.</typeparam>
            <typeparam name="C">The collection and result type.</typeparam>
            <param name="source">The source async sequence.</param>
            <param name="collectionSupplier">The function that generates the collection.</param>
            <param name="collector">The action called with the collection and the current source item.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.ConcatMap``2(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``0,async_enumerable_dotnet.IAsyncEnumerable{``1}})">
            <summary>
            Maps the source items into inner async sequences and relays their items one after the other sequence.
            </summary>
            <typeparam name="T">The element type of the source async sequence.</typeparam>
            <typeparam name="R">The element type of the inner sequences and the result items.</typeparam>
            <param name="source">The source async sequence to be mapped.</param>
            <param name="mapper">The function recieving the source item and should return an inner async sequence to relay elements of.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.ConcatMap``2(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Maps the source items into inner enumerable sequences and relays their items one after the other sequence.
            </summary>
            <typeparam name="T">The element type of the source async sequence.</typeparam>
            <typeparam name="R">The element type of the inner sequences and the result items.</typeparam>
            <param name="source">The source async sequence to be mapped.</param>
            <param name="mapper">The function recieving the source item and should return an inner enumerable sequence to relay elements of.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.DoOnNext``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Action{``0})">
            <summary>
            Calls a handler action when the source signals an item.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence.</param>
            <param name="handler">The action called when an source item becomes available.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.DoOnNext``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Calls an asynchronous handler function when the source
            signals an item and waits for this function to complete before moving on.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence.</param>
            <param name="handler">The function called when an item becomes available and should return a task that when completed, resumes the async sequence.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.ToEnumerable``1(async_enumerable_dotnet.IAsyncEnumerable{``0})">
            <summary>
            Converts the async sequence into a blocking enumerable sequence.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence.</param>
            <returns>The new IEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.OnErrorResumeNext``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{System.Exception,async_enumerable_dotnet.IAsyncEnumerable{``0}})">
            <summary>
            Calls a handler if the source async sequence fails to
            produce a fallback async sequence to resume with.
            </summary>
            <typeparam name="T">The element type of the sequences.</typeparam>
            <param name="source">The source async sequence that can fail.</param>
            <param name="handler">The function taking the failure Exception and should return a fallback async
            sequence to resume with.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Concat``1(async_enumerable_dotnet.IAsyncEnumerable{``0}[])">
            <summary>
            Relays items of each async source of the given array one after the other.
            </summary>
            <typeparam name="T">The shared element type.</typeparam>
            <param name="sources">The params array of async sequences to relay one after the other.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Concat``1(System.Collections.Generic.IEnumerable{async_enumerable_dotnet.IAsyncEnumerable{``0}})">
            <summary>
            Relays items of each async source of the given enumerable sequence one after the other.
            </summary>
            <typeparam name="T">The shared element type.</typeparam>
            <param name="sources">The enumerable sequence of async sequences to relay one after the other.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.ConcatWith``1(async_enumerable_dotnet.IAsyncEnumerable{``0},async_enumerable_dotnet.IAsyncEnumerable{``0})">
            <summary>
            Continue with another async sequence once the main sequence completes.
            </summary>
            <typeparam name="T">The shared element type of the async sequences.</typeparam>
            <param name="source">The main source async sequences.</param>
            <param name="other">The next async source sequence.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.TakeUntil``2(async_enumerable_dotnet.IAsyncEnumerable{``0},async_enumerable_dotnet.IAsyncEnumerable{``1})">
            <summary>
            Relays items of the main async sequence until the other
            async sequence produces an item or completes.
            </summary>
            <typeparam name="T">The source element type.</typeparam>
            <typeparam name="U">The element type of the other source.</typeparam>
            <param name="source">The main source async sequence.</param>
            <param name="other">The other sequence that indicates how long to relay elements of the main source.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Interval(System.TimeSpan)">
            <summary>
            Produces an ever increasing number periodically.
            </summary>
            <param name="period">The initial and in-between time period for when to signal the next value.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Interval(System.TimeSpan,System.TimeSpan)">
            <summary>
            Produces an ever increasing number after an itial delay, then periodically.
            </summary>
            <param name="initialDelay">The initial delay before the first item emitted.</param>
            <param name="period">The initial and in-between time period for when to signal the next value.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Interval(System.Int64,System.Int64,System.TimeSpan)">
            <summary>
            Produces a number from a range of numbers periodically.
            </summary>
            <param name="start">The initial value.</param>
            <param name="count">The number of values to produce.</param>
            <param name="period">The initial and in-between time period for when to signal the next value.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Interval(System.Int64,System.Int64,System.TimeSpan,System.TimeSpan)">
            <summary>
            Produces a number from a range of numbers, the first after an initial delay and the rest periodically.
            </summary>
            <param name="start">The initial value.</param>
            <param name="count">The number of values to produce.</param>
            <param name="initialDelay">The delay before the first value is emitted.</param>
            <param name="period">The initial and in-between time period for when to signal the next value.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Amb``1(async_enumerable_dotnet.IAsyncEnumerable{``0}[])">
            <summary>
            Relays the items of that async sequence which responds first with an item or termination.
            </summary>
            <typeparam name="T">The shared element type.</typeparam>
            <param name="sources">The params array of async sources.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.IgnoreElements``1(async_enumerable_dotnet.IAsyncEnumerable{``0})">
            <summary>
            Ignores all elements of the source async sequence and only relays the terminal signal.
            </summary>
            <typeparam name="T">The element type of the source async sequence.</typeparam>
            <param name="source">The source async sequence to ignore elements of.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.DefaultIfEmpty``1(async_enumerable_dotnet.IAsyncEnumerable{``0},``0)">
            <summary>
            Signal a default item if the source async sequence ends without any items.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence that could be empty.</param>
            <param name="defaultItem">The item to signal if the source async sequence turns out to be empty.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.SwitchIfEmpty``1(async_enumerable_dotnet.IAsyncEnumerable{``0},async_enumerable_dotnet.IAsyncEnumerable{``0})">
            <summary>
            Resumes with another async sequence if the source sequence has no items.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence that could be empty.</param>
            <param name="other">The fallback async sequence if the source turns out to be empty.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.TakeWhile``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Relays items of the source async sequence while they pass the predicate, ending the sequence when the predicate returns false.
            </summary>
            <typeparam name="T">The element type of the sequence.</typeparam>
            <param name="source">The source async sequence.</param>
            <param name="predicate">The function called for each source item and if returns true, the item is relayed. If it returns false, the sequence ends.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.SkipWhile``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Skips items from the source async sequence as long as the predicate returns true for them, relaying the rest once the predicate returns false.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence.</param>
            <param name="predicate">The function receiving the source item and should return true to keep skipping items or return false to relay the current and all subsequent items.</param>
            <returns></returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Repeat``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Int64)">
            <summary>
            Repeatedly relay the source async sequence once it completes the previous time.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence to repeatedly relay items of.</param>
            <param name="n">The optional number of total repeats. n == 1 will relay items once, n == 2 will relay items twice, etc.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Repeat``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{System.Int64,System.Boolean})">
            <summary>
            Repeatedly relay the source async sequence, once it completes the previous time, when the function returns true, ending the sequence otherwise.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence to repeatedly relay items of.</param>
            <param name="condition">The function called when the current run completes with
            the current run index (zero-based) and should return to repeat the sequence once more, false to end it.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Retry``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Int64)">
            <summary>
            Retry a possibly failing async sequence, optionally a limited number of times before giving up.
            </summary>
            <typeparam name="T">The element type of the source async sequence.</typeparam>
            <param name="source">The source async sequence that could fail and should be repeated.</param>
            <param name="n">The number of retries. n == 1 will run the sequence once, n == 2 will run a failed sequence again.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Retry``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{System.Int64,System.Exception,System.Boolean})">
            <summary>
            Retry a possibly failing async sequence if the condition returns true for the Exception and/or retry index.
            </summary>
            <typeparam name="T">The element type of the source async sequence.</typeparam>
            <param name="source">The source async sequence that could fail and should be repeated.</param>
            <param name="condition">Called when the sequence fails with the retry index (zero-based) and last failure Exception and should return true if the sequence should be retried.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.SkipLast``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Skips the last given number of items from the source
            async sequence.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence.</param>
            <param name="n">The number of last items to skip.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.TakeLast``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Keep the last number of items of the source sequence
            and relay those to the consumer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence.</param>
            <param name="n">The number of last items to keep.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Buffer``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Collect the specified number of source items, non-overlappingly, into Lists and emit those lists.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence to batch up.</param>
            <param name="size">The maximum number of items per lists.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Buffer``2(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Int32,System.Func{``1})">
            <summary>
            Collect the specified number of source items, non-overlappingly, into custom ICollections generated on demand and emit those lists.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="C">The custom collection type.</typeparam>
            <param name="source">The source async sequence to batch up.</param>
            <param name="size">The maximum number of items per lists.</param>
            <param name="bufferSupplier">The function called to create a new collection.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Buffer``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Collect the specified number of source items, possibly overlappingly, into Lists and emit those lists.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence to batch up.</param>
            <param name="size">The maximum number of items per lists.</param>
            <param name="skip">After how many items to start a new list. If smaller than size, the output will be buffers sharing items. If larger than size, some source items will not be in buffers.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Buffer``2(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Int32,System.Int32,System.Func{``1})">
            <summary>
            Collect the specified number of source items, possibly overlappingly, into custom ICollections and emit those lists.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="C">The custom collection type.</typeparam>
            <param name="source">The source async sequence to batch up.</param>
            <param name="size">The maximum number of items per lists.</param>
            <param name="skip">After how many items to start a new list. If smaller than size, the output will be buffers sharing items. If larger than size, some source items will not be in buffers.</param>
            <param name="bufferSupplier">The function called to create a new collection.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Scan``1(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Aggregate the source elements in a rolling fashion by emitting all intermediate accumulated value.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence to aggregate in a rolling fashion.</param>
            <param name="scanner">The function receiving the previous (or first) accumulator value, the current source item and should return the new accumulator item to be emitted as well.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Scan``2(async_enumerable_dotnet.IAsyncEnumerable{``0},System.Func{``1},System.Func{``1,``0,``1})">
            <summary>
            Aggregate the source elements in a rolling fashion by emitting all intermediate accumulated value.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="R">The accumulator/result type.</typeparam>
            <param name="source">The source async sequence to aggregate in a rolling fashion.</param>
            <param name="initialSupplier">The function called to generate the initial accumulator value.</param>
            <param name="scanner">The function receiving the previous (or first) accumulator value, the current source item and should return the new accumulator item to be emitted as well.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.First``1(async_enumerable_dotnet.IAsyncEnumerable{``0})">
            <summary>
            Relays the first element of the source or fails with an <see cref="T:System.IndexOutOfRangeException"/> if the source async sequence is empty.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.First``1(async_enumerable_dotnet.IAsyncEnumerable{``0},``0)">
            <summary>
            Relays the first element of the source or the default item if the source async sequence is empty.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence.</param>
            <param name="defaultItem">The item to signal if the source is empty.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Last``1(async_enumerable_dotnet.IAsyncEnumerable{``0})">
            <summary>
            Relays the last element of the source or fails with an <see cref="T:System.IndexOutOfRangeException"/> if the source async sequence is empty.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Last``1(async_enumerable_dotnet.IAsyncEnumerable{``0},``0)">
            <summary>
            Relays the last element of the source or signals the default item if the source async sequence is empty.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence.</param>
            <param name="defaultItem">The item to signal if the source is empty.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Single``1(async_enumerable_dotnet.IAsyncEnumerable{``0})">
            <summary>
            Relays the only element of the source or fails with an <see cref="T:System.IndexOutOfRangeException"/> if the source async sequence is empty or has more elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Single``1(async_enumerable_dotnet.IAsyncEnumerable{``0},``0)">
            <summary>
            Relays the only element of the source, the default item if the source is empty or fails with an <see cref="T:System.IndexOutOfRangeException"/> if the source has more elements.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source async sequence.</param>
            <param name="defaultItem">The item to signal if the source is empty.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.SkipUntil``2(async_enumerable_dotnet.IAsyncEnumerable{``0},async_enumerable_dotnet.IAsyncEnumerable{``1})">
            <summary>
            Skips elements from the source async sequence until the other async sequence produces an item or completes, relaying all subsequent source items then on.
            </summary>
            <typeparam name="T">The element type of the source.</typeparam>
            <typeparam name="U">The element type of the other/until async sequence.</typeparam>
            <param name="source">The source async sequence to skip items of</param>
            <param name="other">The other async sequence to indicate when to stop skipping and start relaying items.</param>
            <returns>The new IAsyncEnumerable instance.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.AsyncEnumerable.Consume``1(async_enumerable_dotnet.IAsyncEnumerable{``0},async_enumerable_dotnet.IAsyncConsumer{``0},System.Threading.CancellationToken)">
            <summary>
            Consume the source async sequence by emitting items and terminal signals via
            the given <see cref="T:async_enumerable_dotnet.IAsyncConsumer`1"/> consumer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source sequence to consume.</param>
            <param name="consumer">The push-awaitable consumer.</param>
            <param name="ct">The optional cancellation token to stop the consumption.</param>
            <returns>The task that is completed when the consumption terminates.</returns>
        </member>
        <member name="T:async_enumerable_dotnet.IAsyncDisposable">
            <summary>
            Until C# 8: Dispose a resource or sequence asynchronously in an awaitable fashion.
            </summary>
        </member>
        <member name="M:async_enumerable_dotnet.IAsyncDisposable.DisposeAsync">
            <summary>
            Dispose a resource or sequence asynchronously.
            </summary>
            <returns>The task completed when the dispose action completes.</returns>
        </member>
        <member name="T:async_enumerable_dotnet.IAsyncEnumerator`1">
            <summary>
            Until C# 8: Represents an active asynchronous sequence which can be polled for more items.
            </summary>
            <typeparam name="T">The element type of the async sequence.</typeparam>
            <remarks>
            The <see cref="M:async_enumerable_dotnet.IAsyncDisposable.DisposeAsync"/> should be called exactly once and
            only after an outstanding <see cref="M:async_enumerable_dotnet.IAsyncEnumerator`1.MoveNextAsync"/>'s task completed.
            </remarks>
        </member>
        <member name="M:async_enumerable_dotnet.IAsyncEnumerator`1.MoveNextAsync">
            <summary>
            Request the next element from the async sequence.
            </summary>
            <returns>A task that returns true if the next item can be read via
            <see cref="P:async_enumerable_dotnet.IAsyncEnumerator`1.Current"/>, false if there will be no further items.</returns>
        </member>
        <member name="P:async_enumerable_dotnet.IAsyncEnumerator`1.Current">
            <summary>
            Returns the current item after a successful <see cref="M:async_enumerable_dotnet.IAsyncEnumerator`1.MoveNextAsync"/> call.
            </summary>
        </member>
        <member name="T:async_enumerable_dotnet.IAsyncEnumerable`1">
            <summary>
            Until C# 8: Represents a deferred/lazy asynchronous sequence of values.
            </summary>
            <typeparam name="T">The element type of the async sequence.</typeparam>
        </member>
        <member name="M:async_enumerable_dotnet.IAsyncEnumerable`1.GetAsyncEnumerator">
            <summary>
            Returns an <see cref="T:async_enumerable_dotnet.IAsyncEnumerator`1"/> representing an active asynchronous sequence.
            </summary>
            <returns>The active asynchronous sequence to be consumed.</returns>
        </member>
        <member name="T:async_enumerable_dotnet.IAsyncEmitter`1">
            <summary>
            Provides API for generating items.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:async_enumerable_dotnet.IAsyncEmitter`1.Next(`0)">
            <summary>
            Push an item and wait until the generator can proceed.
            </summary>
            <param name="value">The element to produce.</param>
            <returns>The task that should be awaited before calling the method again.</returns>
        </member>
        <member name="P:async_enumerable_dotnet.IAsyncEmitter`1.DisposeAsyncRequested">
            <summary>
            Returns true if the consumer requested stopping a sequence.
            </summary>
        </member>
        <member name="T:async_enumerable_dotnet.IAsyncConsumer`1">
            <summary>
            The "push-side" of an IAsyncEnumerator.
            Each method should be awaited and called non-overlappingly.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <remarks>
            The protocol is <code>Next* (Error | Complete)?</code>
            </remarks>
        </member>
        <member name="M:async_enumerable_dotnet.IAsyncConsumer`1.Next(`0)">
            <summary>
            Push a value. Can be called multiple times.
            </summary>
            <param name="value">The value to push.</param>
            <returns>The task to await before calling any of the methods again.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.IAsyncConsumer`1.Error(System.Exception)">
            <summary>
            Push a final exception. Can be called at most once.
            </summary>
            <param name="ex">The exception to push.</param>
            <returns>The task to await before calling any of the methods again.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.IAsyncConsumer`1.Complete">
            <summary>
            Indicate no more items will be pushed. Can be called at most once.
            </summary>
            <returns>The task to await before calling any of the methods again.</returns>
        </member>
        <member name="T:async_enumerable_dotnet.impl.ExceptionHelper">
            <summary>
            Helper methods for aggregating multiple Exceptions atomically.
            </summary>
        </member>
        <member name="F:async_enumerable_dotnet.impl.ExceptionHelper.Terminated">
            <summary>
            The singleton exception indicating a terminal state so
            that no further exceptions will be aggregated.
            </summary>
        </member>
        <member name="T:async_enumerable_dotnet.impl.ResumeHelper">
            <summary>
            Utility methods for working with resumption-type
            lock-free algorithms using TaskCompletionSources.
            </summary>
        </member>
        <member name="M:async_enumerable_dotnet.impl.ResumeHelper.Resume``1(System.Threading.Tasks.TaskCompletionSource{``0}@)">
            <summary>
            Atomically get or create a TaskCompletionSource stored
            in the given field.
            </summary>
            <typeparam name="U">The element type of the completion source.</typeparam>
            <param name="resume">The field to store the completion source</param>
            <returns>The existing or created TaskCompletionSource.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.impl.ResumeHelper.Clear``1(System.Threading.Tasks.TaskCompletionSource{``0}@)">
            <summary>
            Atomically clear the target TaskCompletionSource field.
            </summary>
            <typeparam name="U">The element type of the completion source.</typeparam>
            <param name="resume">The field to clear.</param>
        </member>
        <member name="T:async_enumerable_dotnet.MulticastAsyncEnumerable`1">
            <summary>
            Delivers items or terminal events to multiple
            consumers.
            </summary>
            <typeparam name="T">The element type of the async sequence.</typeparam>
        </member>
        <member name="P:async_enumerable_dotnet.MulticastAsyncEnumerable`1.HasConsumers">
            <summary>
            Returns true if there are any consumers to this AsyncEnumerable.
            </summary>
        </member>
        <member name="M:async_enumerable_dotnet.MulticastAsyncEnumerable`1.#ctor">
            <summary>
            Construct a non-terminated MulticastAsyncEnumerable.
            </summary>
        </member>
        <member name="M:async_enumerable_dotnet.MulticastAsyncEnumerable`1.Next(`0)">
            <summary>
            Push a value. Can be called multiple times.
            </summary>
            <param name="value">The value to push.</param>
            <returns>The task to await before calling any of the methods again.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.MulticastAsyncEnumerable`1.Error(System.Exception)">
            <summary>
            Push a final exception. Can be called at most once.
            </summary>
            <param name="ex">The exception to push.</param>
            <returns>The task to await before calling any of the methods again.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.MulticastAsyncEnumerable`1.Complete">
            <summary>
            Indicate no more items will be pushed. Can be called at most once.
            </summary>
            <returns>The task to await before calling any of the methods again.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.MulticastAsyncEnumerable`1.GetAsyncEnumerator">
            <summary>
            Returns an <see cref="T:async_enumerable_dotnet.IAsyncEnumerator`1"/> representing an active asynchronous sequence.
            </summary>
            <returns>The active asynchronous sequence to be consumed.</returns>
        </member>
        <member name="T:async_enumerable_dotnet.ReplayAsyncEnumerable`1">
            <summary>
            Caches items and terminal signals and replays it
            to its IAsyncEnumerator consumers.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="P:async_enumerable_dotnet.ReplayAsyncEnumerable`1.HasConsumers">
            <summary>
            Returns true if there are any consumers to this AsyncEnumerable.
            </summary>
        </member>
        <member name="M:async_enumerable_dotnet.ReplayAsyncEnumerable`1.#ctor">
            <summary>
            Construct an unbounded ReplayAsyncEnumerable.
            </summary>
        </member>
        <member name="M:async_enumerable_dotnet.ReplayAsyncEnumerable`1.#ctor(System.Int32)">
            <summary>
            Construct a size-bound ReplayAsyncEnumerable.
            </summary>
            <param name="maxSize">The maximum number of items to retain.</param>
        </member>
        <member name="M:async_enumerable_dotnet.ReplayAsyncEnumerable`1.#ctor(System.TimeSpan,System.Func{System.Int64})">
            <summary>
            Construct a time-bound ReplayAsyncEnumerable.
            </summary>
            <param name="maxAge">The maximum age of items to retain.</param>
            <param name="timeSource">The optional source for the current time. Defaults to the unix epoch milliseconds.</param>
        </member>
        <member name="M:async_enumerable_dotnet.ReplayAsyncEnumerable`1.#ctor(System.Int32,System.TimeSpan,System.Func{System.Int64})">
            <summary>
            Construct a time- and size-bound ReplayAsyncEnumerable.
            </summary>
            <param name="maxSize">The maximum number of items to retain.</param>
            <param name="maxAge">The maximum age of items to retain.</param>
            <param name="timeSource">The optional source for the current time. Defaults to the unix epoch milliseconds.</param>
        </member>
        <member name="M:async_enumerable_dotnet.ReplayAsyncEnumerable`1.Complete">
            <summary>
            Indicate no more items will be pushed. Can be called at most once.
            </summary>
            <returns>The task to await before calling any of the methods again.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.ReplayAsyncEnumerable`1.Error(System.Exception)">
            <summary>
            Push a final exception. Can be called at most once.
            </summary>
            <param name="ex">The exception to push.</param>
            <returns>The task to await before calling any of the methods again.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.ReplayAsyncEnumerable`1.Next(`0)">
            <summary>
            Push a value. Can be called multiple times.
            </summary>
            <param name="value">The value to push.</param>
            <returns>The task to await before calling any of the methods again.</returns>
        </member>
        <member name="M:async_enumerable_dotnet.ReplayAsyncEnumerable`1.GetAsyncEnumerator">
            <summary>
            Returns an <see cref="T:async_enumerable_dotnet.IAsyncEnumerator`1"/> representing an active asynchronous sequence.
            </summary>
            <returns>The active asynchronous sequence to be consumed.</returns>
        </member>
    </members>
</doc>
